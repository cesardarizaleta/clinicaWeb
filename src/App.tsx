import React, { useState, useEffect, useRef, type FormEvent, type ChangeEvent, type JSX } from 'react';
import './App.css'; 
import chatbotResponsesData from './responses.json'; 
import type { Message, ChatResponse, ChatResponsesData } from './types';
import { GoogleGenerativeAI, type GenerativeModel } from '@google/generative-ai';
import { useNavigate } from 'react-router-dom';

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_KEY; 

let model: GenerativeModel | null; 
let genAI: GoogleGenerativeAI;

try {
  genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
  model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-lite-preview-06-17" }); 
  console.log("Modelo Gemini inicializado con 'gemini-2.5-flash-lite-preview-06-17'.");
} catch (error) {
  console.error("Error al inicializar GoogleGenerativeAI o el modelo:", error);
  model = null; 
}


const chatbotResponses: ChatResponse[] = (chatbotResponsesData as ChatResponsesData).respuestas;

const buildGeminiPrompt = (userMessage: string, responsesData: ChatResponse[]): string => {
  const clinicContext = `
    Eres un asistente virtual profesional de la Cl√≠nica San Rafael Valencia.
    Tu objetivo es ayudar a los usuarios con informaci√≥n clara, √∫til y visualmente atractiva sobre los servicios y secciones de la cl√≠nica.
    Si consideras que el usuario debe ser redirigido a una secci√≥n o ruta espec√≠fica, responde de forma profesional y elabora una breve descripci√≥n atractiva de la secci√≥n antes del @ruta, usando nombres amigables y visuales para cada ruta. Ejemplo:
    "üåü Nuestra secci√≥n <b>Sobre Nosotros</b> te permitir√° conocer la historia, valores y el equipo humano que hace posible nuestra atenci√≥n de excelencia. @ruta:/sobre-nosotros"
    SOLO puedes usar los siguientes nombres de secci√≥n/ruta y sus rutas asociadas:
    - <b>Inicio</b> (/inicio): P√°gina principal con informaci√≥n general y acceso r√°pido a todos los servicios.
    - <b>T√©rminos</b> (/terminos): Consulta los t√©rminos y condiciones de nuestros servicios m√©dicos.
    - <b>Propiedades</b> (/propiedades): Descubre la infraestructura, equipos y recursos de la cl√≠nica.
    - <b>Sobre Nosotros</b> (/sobre-nosotros): Conoce nuestra historia, misi√≥n, visi√≥n y valores.
    - <b>Servicios</b> (/servicios): Explora todas las especialidades y servicios m√©dicos que ofrecemos.
    - <b>Equipo M√©dico</b> (/equipo-medico): Informaci√≥n sobre nuestros doctores y especialistas.
    - <b>Contacto</b> (/contacto): Formas de contacto, ubicaci√≥n y canales de atenci√≥n.
    No inventes rutas como terminos-y-condiciones, terminos-de-uso, ni variantes. Usa √∫nicamente los nombres y rutas reales indicados arriba.
    Si usas @section o @ruta, hazlo al final de tu respuesta y no expliques el comando. Si la respuesta incluye ambos, prioriza @ruta.
    S√© siempre profesional, c√°lido, breve y visualmente atractivo en tus respuestas, resaltando los beneficios o informaci√≥n relevante de cada secci√≥n antes de redirigir. Puedes usar emojis o negritas para hacer la respuesta m√°s visual.
    Aqu√≠ hay informaci√≥n estructurada sobre los servicios de la cl√≠nica que puedes usar como referencia, aunque no siempre es necesario responder solo con esto, sino para guiar tu comprensi√≥n:
    `;

  const jsonContext = responsesData.map(res => 
    `Palabras clave: ${res.palabras_clave.join(', ')}\nRespuesta: ${res.respuesta}`
  ).join('\n\n');

  const finalPrompt = `
    ${clinicContext}
    ---
    Informaci√≥n de la Cl√≠nica (JSON context):
    ${jsonContext}
    ---
    Considerando el contexto de la cl√≠nica y la informaci√≥n proporcionada, por favor responde a la siguiente pregunta del usuario. Si la pregunta es espec√≠fica de un servicio de cl√≠nica, puedes usar la informaci√≥n de referencia. Si es una pregunta general de salud o algo que va m√°s all√° de los servicios directos de la cl√≠nica, responde de manera informativa y √∫til, como lo har√≠a un asistente de IA, pero siempre manteniendo un tono profesional y relacionado con el sector salud. Evita mencionar que tienes un JSON o que tu respuesta proviene de una base de datos.
    
    Pregunta del usuario: "${userMessage}"
    `.trim();

  return finalPrompt;
};



function App(): JSX.Element {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState<string>('');
  const [smartMode, setSmartMode] = useState<boolean>(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();

  const initialMessage: Message = {
    text: "üëã ¬°Hola! Soy tu asistente virtual de la cl√≠nica. ¬øEn qu√© puedo ayudarte hoy? Puedes activar el **Modo Inteligente** para una conversaci√≥n m√°s abierta.",
    sender: 'bot',
    timestamp: new Date().toLocaleTimeString(),
  };

  useEffect(() => {
    setMessages([initialMessage]);
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = (): void => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };


  const handleSendMessage = (e: FormEvent): void => {
    e.preventDefault();
    if (input.trim() === '') return;

    const newMessage: Message = {
      text: input,
      sender: 'user',
      timestamp: new Date().toLocaleTimeString(),
    };
    setMessages((prevMessages) => [...prevMessages, newMessage]);
    handleBotResponse(input);
    setInput('');
  };

  const validSections = [
    'inicio',
    'terminos',
    'propiedades',
    'sobre-nosotros',
    'servicios',
    'equipo-medico',
    'contacto',
  ];

  const handleBotResponse = async (userMessage: string): Promise<void> => {
    let botReplyText: string;
    let sectionToScroll: string | null = null;
    let routeToNavigate: string | null = null;

    if (smartMode && model) {
      try {
        const geminiPrompt = buildGeminiPrompt(userMessage, chatbotResponses); 
        const result = await model.generateContent(geminiPrompt);
        const response = await result.response;
        botReplyText = response.text();
      } catch (error) {
        console.error("Error al comunicarse con Gemini:", error);
        botReplyText = "Lo siento, tengo problemas para conectarme con mi cerebro inteligente en este momento. Esto podr√≠a deberse a un problema de conexi√≥n, a que el modelo de IA no est√° disponible o a la complejidad de la solicitud. Por favor, int√©ntalo de nuevo m√°s tarde o desactiva el Modo Inteligente.";
      }
    } else {
      const normalizedUserMessage: string = userMessage.toLowerCase().normalize("NFD").replace(/[^a-z0-9 ]/g, "");
      const foundResponse: ChatResponse | undefined = chatbotResponses.find((response) =>
        response.palabras_clave.some((keyword) =>
          normalizedUserMessage.includes(keyword.toLowerCase().normalize("NFD").replace(/[^a-z0-9 ]/g, ""))
        )
      );

      if (foundResponse) {
        botReplyText = foundResponse.respuesta;
      } else {
        botReplyText = "Lo siento, no entend√≠ tu pregunta. ¬øPodr√≠as reformularla o preguntar sobre otro tema? Puedes preguntar sobre: **especialidades, doctores, citas, horarios, ubicaci√≥n, emergencias, seguros, laboratorio, farmacia, precios o COVID.** Si quieres una conversaci√≥n m√°s abierta, activa el **Modo Inteligente**.";
      }
    }

    // Detecta @ruta, @section:NAME y tambi√©n @NAME (ej: @contacto)
    const routeMatch = botReplyText.match(/@ruta:([/a-zA-Z0-9-]+)/);
    const sectionMatch = botReplyText.match(/@section:([a-zA-Z0-9-]+)/);
    const atSectionMatch = botReplyText.match(/@([a-zA-Z0-9-]+)/);

    if (routeMatch) {
      routeToNavigate = routeMatch[1];
      botReplyText = botReplyText.replace(/@ruta:[/a-zA-Z0-9-]+/, '').trim();
    } else if (sectionMatch && validSections.includes(sectionMatch[1])) {
      sectionToScroll = sectionMatch[1];
      botReplyText = botReplyText.replace(/@section:([a-zA-Z0-9-]+)/, '').trim();
    } else if (atSectionMatch && validSections.includes(atSectionMatch[1])) {
      sectionToScroll = atSectionMatch[1];
      botReplyText = botReplyText.replace(/@([a-zA-Z0-9-]+)/, '').trim();
    }

    const botReply: Message = {
      text: botReplyText,
      sender: 'bot',
      timestamp: new Date().toLocaleTimeString(),
    };

    setTimeout(() => {
      setMessages((prevMessages) => [...prevMessages, botReply]);
      if (routeToNavigate) {
        navigate(routeToNavigate);
      } else if (sectionToScroll) {
        navigate(`/${sectionToScroll}`);
      }
    }, 500);
  };

  const handleSmartModeChange = (e: ChangeEvent<HTMLInputElement>): void => {
    const isChecked = e.target.checked;
    setSmartMode(isChecked);

    if (!model && isChecked) {
        const noModelMessage: Message = {
            text: "‚ö†Ô∏è No se pudo cargar el Modo Inteligente. Aseg√∫rate de que tu clave API sea v√°lida y el modelo est√© disponible.",
            sender: 'bot',
            timestamp: new Date().toLocaleTimeString(),
        };
        setMessages((prevMessages) => [...prevMessages, noModelMessage]);
        return; 
    }

    const modeMessage: Message = {
      text: isChecked
        ? "üß† ¬°Modo Inteligente activado! Ahora puedes preguntarme cualquier cosa. Ten en cuenta que mis respuestas ser√°n m√°s generales y generadas por IA."
        : "üìö Modo por defecto activado. Solo responder√© a preguntas relacionadas con los servicios de la cl√≠nica basados en mi conocimiento predefinido.",
      sender: 'bot',
      timestamp: new Date().toLocaleTimeString(),
    };
    setTimeout(() => {
      setMessages((prevMessages) => [...prevMessages, modeMessage]);
    }, 300);
  };

  const renderMessageContent = (text: string): JSX.Element[] => {
    return text.split('\n').map((item, key) => (
      <React.Fragment key={key}>
        <span dangerouslySetInnerHTML={{ __html: item.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }} />
        <br />
      </React.Fragment>
    ));
  };

  return (
    <div className="chatbot-container">
      <header className="chatbot-header">
        <h1>Asistente M√©dico Virtual</h1>
        <div className="smart-mode-toggle">
          <label htmlFor="smart-mode-switch">Modo Inteligente</label>
          <input
            type="checkbox"
            id="smart-mode-switch"
            checked={smartMode}
            onChange={handleSmartModeChange}
            disabled={!model} 
          />
        </div>
      </header>
      <div className="chatbot-messages">
        {messages.map((msg, index) => (
          <div key={index} className={`message-bubble ${msg.sender}`}>
            <div className="message-content">
              {renderMessageContent(msg.text)}
            </div>
            <span className="message-timestamp">{msg.timestamp}</span>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <form onSubmit={handleSendMessage} className="chatbot-input-form">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder={smartMode ? "Preg√∫ntame cualquier cosa..." : "Escribe tu mensaje sobre la cl√≠nica..."}
        />
        <button type="submit">Enviar</button>
      </form>
    </div>
  );
}

export default App;